"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeClusterAdapter = void 0;
exports.createAdapter = createAdapter;
exports.setupPrimary = setupPrimary;
const node_cluster_1 = __importDefault(require("node:cluster"));
const socket_io_adapter_1 = require("socket.io-adapter");
const debug_1 = __importDefault(require("debug"));
const debug = (0, debug_1.default)("socket.io-cluster-adapter");
const MESSAGE_SOURCE = "_sio_adapter";
const hasOwnProperty = Object.prototype.hasOwnProperty;
function ignoreError() { }
/**
 * Returns a function that will create a NodeClusterAdapter instance.
 *
 * @param opts - additional options
 *
 * @public
 * @see https://nodejs.org/api/cluster.html
 */
function createAdapter(opts = {}) {
    return function (nsp) {
        return new NodeClusterAdapter(nsp, opts);
    };
}
class NodeClusterAdapter extends socket_io_adapter_1.ClusterAdapterWithHeartbeat {
    constructor(nsp, opts = {}) {
        super(nsp, opts);
        process.on("message", (message) => {
            const isValidSource = (message === null || message === void 0 ? void 0 : message.source) === MESSAGE_SOURCE;
            if (!isValidSource) {
                debug("[%s] ignore unknown source", this.uid);
                return;
            }
            // note: this check should be done in the onMessage() handler
            if (message.nsp !== this.nsp.name) {
                debug("[%s] ignore other namespace", this.uid);
                return;
            }
            this.onMessage(message);
        });
        // until https://github.com/socketio/socket.io/commit/f3e1f5ebdf59158d0c8d1e20f8230275617fb355 is released
        this.init();
    }
    doPublish(message) {
        message.source = MESSAGE_SOURCE;
        process.send(message, null, {}, ignoreError);
        return Promise.resolve(""); // connection state recovery is not supported
    }
    doPublishResponse(requesterUid, response) {
        response.source = MESSAGE_SOURCE;
        response.requesterUid = requesterUid;
        process.send(response, null, {}, ignoreError);
        return Promise.resolve();
    }
}
exports.NodeClusterAdapter = NodeClusterAdapter;
const UIDS = Symbol("uids");
function setupPrimary() {
    node_cluster_1.default.on("message", (worker, message) => {
        var _a;
        const isValidSource = (message === null || message === void 0 ? void 0 : message.source) === MESSAGE_SOURCE;
        if (!isValidSource) {
            return;
        }
        // store the requester's uids (one per namespace) so that the response can be sent specifically to them
        worker[UIDS] = worker[UIDS] || new Set();
        worker[UIDS].add(message.uid);
        switch (message.type) {
            case socket_io_adapter_1.MessageType.FETCH_SOCKETS_RESPONSE:
            case socket_io_adapter_1.MessageType.SERVER_SIDE_EMIT_RESPONSE:
                const requesterUid = message.requesterUid;
                for (const workerId in node_cluster_1.default.workers) {
                    if (hasOwnProperty.call(node_cluster_1.default.workers, workerId) &&
                        ((_a = node_cluster_1.default.workers[workerId][UIDS]) === null || _a === void 0 ? void 0 : _a.has(requesterUid))) {
                        node_cluster_1.default.workers[workerId].send(message, null, ignoreError);
                        break;
                    }
                }
                break;
            default:
                const emitterIdAsString = String(worker.id);
                // emit to all workers but the requester
                for (const workerId in node_cluster_1.default.workers) {
                    if (hasOwnProperty.call(node_cluster_1.default.workers, workerId) &&
                        workerId !== emitterIdAsString) {
                        node_cluster_1.default.workers[workerId].send(message, null, ignoreError);
                    }
                }
        }
    });
}
